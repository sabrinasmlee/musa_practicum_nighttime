Variable == "False_Positive" ~ (-14000 * Count))) %>%
# OverallCost =
#  case_when(Variable == "True_Negative"  ~ (Count * 0),
#            Variable == "True_Positive"  ~ (Count * -42727),
#            Variable == "False_Negative" ~ (-42727 * Count),
#            Variable == "False_Positive" ~ (0 * Count)),
# OverallCost_Wide =
#  case_when(Variable == "True_Negative"  ~ (Count * -14000),
#            Variable == "True_Positive"  ~ ((Count * -14000)*.33 + (Count * (-14000 + -42727)*.67)),
#            Variable == "False_Negative" ~ ((-42727+-14000) * Count),
#            Variable == "False_Positive" ~ (-14000 * Count)),
# OverallCost_Targeted =
#  case_when(Variable == "True_Negative"  ~ (Count * 0),
#            Variable == "True_Positive"  ~ ((Count * -14000)*.33 + (Count * (-14000 + -42727)*.67)),
#            Variable == "False_Negative" ~ (-42727 * Count),
#            Variable == "False_Positive" ~ (-14000 * Count))) %>%
bind_cols(data.frame(Description = c(
"Predicted correctly the defendant would not recidivate, no resources are allocated",
"Predicted correctly that the defendant would recidivate, resources are allocated",
"Predicted incorrectly that the defendant would not recidivate, no resources are allocated",
"Predicted incorrectly that the defendant would recidivate, resources are allocated"))) %>%
bind_rows(summarise_all(., funs(if(is.numeric(.)) sum(.) else "Total")))
kable(cost_benefit_table) %>%
kable_styling(font_size = 12, full_width = F,
bootstrap_options = c("striped", "hover", "condensed")) %>%
footnote(general_title = "\n",
general = "Table 6.1")
cost_benefit_table <-
testProbs %>%
count(predOutcome, class) %>%
summarize(True_Negative = sum(n[predOutcome==0 & class==0]),
True_Positive = sum(n[predOutcome==1 & class==1]),
False_Negative = sum(n[predOutcome==0 & class==1]),
False_Positive = sum(n[predOutcome==1 & class==0])) %>%
gather(Variable, Count) %>%
mutate(Program_Wide =
case_when(Variable == "True_Negative"  ~ (Count * -14000),
Variable == "True_Positive"  ~ (Count * -14000),
Variable == "False_Negative" ~ (-14000 * Count),
Variable == "False_Positive" ~ (-14000 * Count)),
Program_Targeted =
case_when(Variable == "True_Negative"  ~ (Count * 0),
Variable == "True_Positive"  ~ (Count * -14000),
Variable == "False_Negative" ~ (0 * Count),
Variable == "False_Positive" ~ (-14000 * Count))) %>%
# OverallCost =
#  case_when(Variable == "True_Negative"  ~ (Count * 0),
#            Variable == "True_Positive"  ~ (Count * -42727),
#            Variable == "False_Negative" ~ (-42727 * Count),
#            Variable == "False_Positive" ~ (0 * Count)),
# OverallCost_Wide =
#  case_when(Variable == "True_Negative"  ~ (Count * -14000),
#            Variable == "True_Positive"  ~ ((Count * -14000)*.33 + (Count * (-14000 + -42727)*.67)),
#            Variable == "False_Negative" ~ ((-42727+-14000) * Count),
#            Variable == "False_Positive" ~ (-14000 * Count)),
# OverallCost_Targeted =
#  case_when(Variable == "True_Negative"  ~ (Count * 0),
#            Variable == "True_Positive"  ~ ((Count * -14000)*.33 + (Count * (-14000 + -42727)*.67)),
#            Variable == "False_Negative" ~ (-42727 * Count),
#            Variable == "False_Positive" ~ (-14000 * Count))) %>%
bind_cols(data.frame(Description = c(
"Predicted correctly the defendant would not recidivate, no resources are allocated",
"Predicted correctly that the defendant would recidivate, resources are allocated",
"Predicted incorrectly that the defendant would not recidivate, no resources are allocated",
"Predicted incorrectly that the defendant would recidivate, resources are allocated"))) %>%
bind_rows(summarise_all(., funs(if(is.numeric(.)) sum(.) else "Total")))
kable(cost_benefit_table) %>%
kable_styling(font_size = 12, full_width = F,
bootstrap_options = c("striped", "hover", "condensed")) %>%
footnote(general_title = "\n",
general = "Table 6.1")
testProbs.thresholds <-
iterateThresholds(data=testProbs, observedClass = class,
predictedProbs = probs, group = Race)
testProbs %>% mutate(predOutcome  = as.factor(ifelse(testProbs$probs > 0.5 , 0.5, 0)))
testProbs <- testProbs %>% mutate(predOutcome  = as.factor(ifelse(testProbs$probs > 0.5 , 0.5, 0)))
cost_benefit_table <-
testProbs %>%
count(predOutcome, class) %>%
summarize(True_Negative = sum(n[predOutcome==0 & class==0]),
True_Positive = sum(n[predOutcome==1 & class==1]),
False_Negative = sum(n[predOutcome==0 & class==1]),
False_Positive = sum(n[predOutcome==1 & class==0])) %>%
gather(Variable, Count) %>%
mutate(Program_Wide =
case_when(Variable == "True_Negative"  ~ (Count * -14000),
Variable == "True_Positive"  ~ (Count * -14000),
Variable == "False_Negative" ~ (-14000 * Count),
Variable == "False_Positive" ~ (-14000 * Count)),
Program_Targeted =
case_when(Variable == "True_Negative"  ~ (Count * 0),
Variable == "True_Positive"  ~ (Count * -14000),
Variable == "False_Negative" ~ (0 * Count),
Variable == "False_Positive" ~ (-14000 * Count))) %>%
# OverallCost =
#  case_when(Variable == "True_Negative"  ~ (Count * 0),
#            Variable == "True_Positive"  ~ (Count * -42727),
#            Variable == "False_Negative" ~ (-42727 * Count),
#            Variable == "False_Positive" ~ (0 * Count)),
# OverallCost_Wide =
#  case_when(Variable == "True_Negative"  ~ (Count * -14000),
#            Variable == "True_Positive"  ~ ((Count * -14000)*.33 + (Count * (-14000 + -42727)*.67)),
#            Variable == "False_Negative" ~ ((-42727+-14000) * Count),
#            Variable == "False_Positive" ~ (-14000 * Count)),
# OverallCost_Targeted =
#  case_when(Variable == "True_Negative"  ~ (Count * 0),
#            Variable == "True_Positive"  ~ ((Count * -14000)*.33 + (Count * (-14000 + -42727)*.67)),
#            Variable == "False_Negative" ~ (-42727 * Count),
#            Variable == "False_Positive" ~ (-14000 * Count))) %>%
bind_cols(data.frame(Description = c(
"Predicted correctly the defendant would not recidivate, no resources are allocated",
"Predicted correctly that the defendant would recidivate, resources are allocated",
"Predicted incorrectly that the defendant would not recidivate, no resources are allocated",
"Predicted incorrectly that the defendant would recidivate, resources are allocated"))) %>%
bind_rows(summarise_all(., funs(if(is.numeric(.)) sum(.) else "Total")))
kable(cost_benefit_table) %>%
kable_styling(font_size = 12, full_width = F,
bootstrap_options = c("striped", "hover", "condensed")) %>%
footnote(general_title = "\n",
general = "Table 6.1")
testProbs %>%
count(predOutcome, class)
testProbs <- testProbs %>% mutate(predOutcome  = as.factor(ifelse(testProbs$probs > 0.5 , 1, 0)))
cost_benefit_table <-
testProbs %>%
count(predOutcome, class) %>%
summarize(True_Negative = sum(n[predOutcome==0 & class==0]),
True_Positive = sum(n[predOutcome==1 & class==1]),
False_Negative = sum(n[predOutcome==0 & class==1]),
False_Positive = sum(n[predOutcome==1 & class==0])) %>%
gather(Variable, Count) %>%
mutate(Program_Wide =
case_when(Variable == "True_Negative"  ~ (Count * -14000),
Variable == "True_Positive"  ~ (Count * -14000),
Variable == "False_Negative" ~ (-14000 * Count),
Variable == "False_Positive" ~ (-14000 * Count)),
Program_Targeted =
case_when(Variable == "True_Negative"  ~ (Count * 0),
Variable == "True_Positive"  ~ (Count * -14000),
Variable == "False_Negative" ~ (0 * Count),
Variable == "False_Positive" ~ (-14000 * Count))) %>%
# OverallCost =
#  case_when(Variable == "True_Negative"  ~ (Count * 0),
#            Variable == "True_Positive"  ~ (Count * -42727),
#            Variable == "False_Negative" ~ (-42727 * Count),
#            Variable == "False_Positive" ~ (0 * Count)),
# OverallCost_Wide =
#  case_when(Variable == "True_Negative"  ~ (Count * -14000),
#            Variable == "True_Positive"  ~ ((Count * -14000)*.33 + (Count * (-14000 + -42727)*.67)),
#            Variable == "False_Negative" ~ ((-42727+-14000) * Count),
#            Variable == "False_Positive" ~ (-14000 * Count)),
# OverallCost_Targeted =
#  case_when(Variable == "True_Negative"  ~ (Count * 0),
#            Variable == "True_Positive"  ~ ((Count * -14000)*.33 + (Count * (-14000 + -42727)*.67)),
#            Variable == "False_Negative" ~ (-42727 * Count),
#            Variable == "False_Positive" ~ (-14000 * Count))) %>%
bind_cols(data.frame(Description = c(
"Predicted correctly the defendant would not recidivate, no resources are allocated",
"Predicted correctly that the defendant would recidivate, resources are allocated",
"Predicted incorrectly that the defendant would not recidivate, no resources are allocated",
"Predicted incorrectly that the defendant would recidivate, resources are allocated"))) %>%
bind_rows(summarise_all(., funs(if(is.numeric(.)) sum(.) else "Total")))
kable(cost_benefit_table) %>%
kable_styling(font_size = 12, full_width = F,
bootstrap_options = c("striped", "hover", "condensed")) %>%
footnote(general_title = "\n",
general = "Table 6.1")
kable(cost_benefit_table,
kable(cost_benefit_table,
digits = 3,
format.args = list(big.mark = ",", scientific = FALSE)) %>%
kable_styling(font_size = 12, full_width = F,
bootstrap_options = c("striped", "hover", "condensed")) %>%
footnote(general_title = "\n",
general = "Table 6.1")
kable(cost_benefit_table,
digits = 3,
format.args = list(big.mark = ",", scientific = FALSE))
kable(cost_benefit_table,
digits = 3,
format.args = list(big.mark = ",")) %>%
kable_styling(font_size = 12, full_width = F,
bootstrap_options = c("striped", "hover", "condensed")) %>%
footnote(general_title = "\n",
general = "Table 6.1")
cost_benefit_table <-
testProbs %>%
count(predOutcome, class) %>%
summarize(True_Negative = sum(n[predOutcome==0 & class==0]),
True_Positive = sum(n[predOutcome==1 & class==1]),
False_Negative = sum(n[predOutcome==0 & class==1]),
False_Positive = sum(n[predOutcome==1 & class==0])) %>%
gather(Variable, Count) %>%
mutate(BaseCost =
case_when(Variable == "True_Negative"  ~ (Count * 0),
Variable == "True_Positive"  ~ (Count * -42727),
Variable == "False_Negative" ~ (-42727 * Count),
Variable == "False_Positive" ~ (0 * Count)),
Cost_WideProgram =
case_when(Variable == "True_Negative"  ~ (Count * -14000),
Variable == "True_Positive"  ~ ((Count * -14000)*.33 + (Count * (-14000 + -42727)*.67)),
Variable == "False_Negative" ~ ((-42727+ -14000) * Count),
Variable == "False_Positive" ~ (-14000 * Count)),
OverallCost_Targeted =
case_when(Variable == "True_Negative"  ~ (Count * 0),
Variable == "True_Positive"  ~ ((Count * -14000)*.33 + (Count * (-14000 + -42727)*.67)),
Variable == "False_Negative" ~ (-42727 * Count),
Variable == "False_Positive" ~ (-14000 * Count))) %>%
bind_cols(data.frame(Description = c(
"Predicted correctly the ex-offender would not recidivate, no resources are allocated, does not recidivate",
"Predicted correctly that the ex-offender would recidivate, resources are allocated, does recidivate",
"Predicted incorrectly that the ex-offender would not recidivate, no resources are allocated, does recidivate",
"Predicted incorrectly that the ex-offender would recidivate, resources are allocated, does not recidivate"))) %>%
bind_rows(summarise_all(., funs(if(is.numeric(.)) sum(.) else "Total")))
kable(cost_benefit_table2,
digits = 3,
format.args = list(big.mark = ",")) %>%
kable_styling(font_size = 12, full_width = F,
bootstrap_options = c("striped", "hover", "condensed")) %>%
footnote(general_title = "\n",
general = "Table 6.1")
cost_benefit_table2 <-
testProbs %>%
count(predOutcome, class) %>%
summarize(True_Negative = sum(n[predOutcome==0 & class==0]),
True_Positive = sum(n[predOutcome==1 & class==1]),
False_Negative = sum(n[predOutcome==0 & class==1]),
False_Positive = sum(n[predOutcome==1 & class==0])) %>%
gather(Variable, Count) %>%
mutate(BaseCost =
case_when(Variable == "True_Negative"  ~ (Count * 0),
Variable == "True_Positive"  ~ (Count * -42727),
Variable == "False_Negative" ~ (-42727 * Count),
Variable == "False_Positive" ~ (0 * Count)),
Cost_WideProgram =
case_when(Variable == "True_Negative"  ~ (Count * -14000),
Variable == "True_Positive"  ~ ((Count * -14000)*.33 + (Count * (-14000 + -42727)*.67)),
Variable == "False_Negative" ~ ((-42727+ -14000) * Count),
Variable == "False_Positive" ~ (-14000 * Count)),
OverallCost_Targeted =
case_when(Variable == "True_Negative"  ~ (Count * 0),
Variable == "True_Positive"  ~ ((Count * -14000)*.33 + (Count * (-14000 + -42727)*.67)),
Variable == "False_Negative" ~ (-42727 * Count),
Variable == "False_Positive" ~ (-14000 * Count))) %>%
bind_cols(data.frame(Description = c(
"Predicted correctly the ex-offender would not recidivate, no resources are allocated, does not recidivate",
"Predicted correctly that the ex-offender would recidivate, resources are allocated, does recidivate",
"Predicted incorrectly that the ex-offender would not recidivate, no resources are allocated, does recidivate",
"Predicted incorrectly that the ex-offender would recidivate, resources are allocated, does not recidivate"))) %>%
bind_rows(summarise_all(., funs(if(is.numeric(.)) sum(.) else "Total")))
cost_benefit_table2 <-
testProbs %>%
count(predOutcome, class) %>%
summarize(True_Negative = sum(n[predOutcome==0 & class==0]),
True_Positive = sum(n[predOutcome==1 & class==1]),
False_Negative = sum(n[predOutcome==0 & class==1]),
False_Positive = sum(n[predOutcome==1 & class==0])) %>%
gather(Variable, Count) %>%
mutate(BaseCost =
case_when(Variable == "True_Negative"  ~ (Count * 0),
Variable == "True_Positive"  ~ (Count * -42727),
Variable == "False_Negative" ~ (-42727 * Count),
Variable == "False_Positive" ~ (0 * Count)),
Cost_WideProgram =
case_when(Variable == "True_Negative"  ~ (Count * -14000),
Variable == "True_Positive"  ~ ((Count * -14000)*.33 + (Count * (-14000 + -42727)*.67)),
Variable == "False_Negative" ~ ((-42727+ -14000) * Count),
Variable == "False_Positive" ~ (-14000 * Count)),
Cost_TargetedProgram =
case_when(Variable == "True_Negative"  ~ (Count * 0),
Variable == "True_Positive"  ~ ((Count * -14000)*.33 + (Count * (-14000 + -42727)*.67)),
Variable == "False_Negative" ~ (-42727 * Count),
Variable == "False_Positive" ~ (-14000 * Count))) %>%
bind_cols(data.frame(Description = c(
"Predicted correctly the ex-offender would not recidivate, no resources are allocated, does not recidivate",
"Predicted correctly that the ex-offender would recidivate, resources are allocated, does recidivate",
"Predicted incorrectly that the ex-offender would not recidivate, no resources are allocated, does recidivate",
"Predicted incorrectly that the ex-offender would recidivate, resources are allocated, does not recidivate"))) %>%
bind_rows(summarise_all(., funs(if(is.numeric(.)) sum(.) else "Total")))
kable(cost_benefit_table2,
digits = 3,
format.args = list(big.mark = ",")) %>%
kable_styling(font_size = 12, full_width = F,
bootstrap_options = c("striped", "hover", "condensed")) %>%
footnote(general_title = "\n",
general = "Table 6.1")
testProbs
testProbs <- test.optimized_threshold %>% mutate(predOutcome  = as.factor(ifelse(testProbs$probs > 0.5 , 1, 0)))
test.optimized_threshold
testProbs <- test.optimized_threshold %>%
mutate(predOutcome  = as.factor(ifelse(test.optimized_threshold$threshold > 0.5, 0.5 , 1, 0)))
testProbs <- test.optimized_threshold %>%
mutate(predOutcome  = as.factor(ifelse(test.optimized_threshold$threshold > "0.5, 0.5" , 1, 0)))
testProbs
testProbs2 <- test.optimized_threshold %>%
mutate(predOutcome  = as.factor(ifelse(test.optimized_threshold$threshold > "0.5, 0.5" , 1, 0)))
testProbs_op <- test.optimized_threshold %>%
mutate(predOutcome  = as.factor(ifelse(test.optimized_threshold$threshold > "0.5, 0.5" , 1, 0)))
cost_benefit_table_op <-
testProbs_op %>%
count(predOutcome, class) %>%
summarize(True_Negative = sum(n[predOutcome==0 & class==0]),
True_Positive = sum(n[predOutcome==1 & class==1]),
False_Negative = sum(n[predOutcome==0 & class==1]),
False_Positive = sum(n[predOutcome==1 & class==0])) %>%
gather(Variable, Count) %>%
mutate(Program_Wide =
case_when(Variable == "True_Negative"  ~ (Count * -14000),
Variable == "True_Positive"  ~ (Count * -14000),
Variable == "False_Negative" ~ (-14000 * Count),
Variable == "False_Positive" ~ (-14000 * Count)),
Program_Targeted =
case_when(Variable == "True_Negative"  ~ (Count * 0),
Variable == "True_Positive"  ~ (Count * -14000),
Variable == "False_Negative" ~ (0 * Count),
Variable == "False_Positive" ~ (-14000 * Count))) %>%
# OverallCost =
#  case_when(Variable == "True_Negative"  ~ (Count * 0),
#            Variable == "True_Positive"  ~ (Count * -42727),
#            Variable == "False_Negative" ~ (-42727 * Count),
#            Variable == "False_Positive" ~ (0 * Count)),
# OverallCost_Wide =
#  case_when(Variable == "True_Negative"  ~ (Count * -14000),
#            Variable == "True_Positive"  ~ ((Count * -14000)*.33 + (Count * (-14000 + -42727)*.67)),
#            Variable == "False_Negative" ~ ((-42727+-14000) * Count),
#            Variable == "False_Positive" ~ (-14000 * Count)),
# OverallCost_Targeted =
#  case_when(Variable == "True_Negative"  ~ (Count * 0),
#            Variable == "True_Positive"  ~ ((Count * -14000)*.33 + (Count * (-14000 + -42727)*.67)),
#            Variable == "False_Negative" ~ (-42727 * Count),
#            Variable == "False_Positive" ~ (-14000 * Count))) %>%
bind_cols(data.frame(Description = c(
"Predicted correctly the defendant would not recidivate, no resources are allocated",
"Predicted correctly that the defendant would recidivate, resources are allocated",
"Predicted incorrectly that the defendant would not recidivate, no resources are allocated",
"Predicted incorrectly that the defendant would recidivate, resources are allocated"))) %>%
bind_rows(summarise_all(., funs(if(is.numeric(.)) sum(.) else "Total")))
test.optimized_threshold %>%
filter(., threshold == "0.5, 0.5")
test.optimized_threshold %>%
filter(., threshold == "0.5, 0.5") %>%
count(predOutcome, class) %>%
summarize(True_Negative = sum(Count_TN),
True_Positive = sum(Count_TP),
False_Negative = sum(Count_FN),
False_Positive = sum(Count_FP))
test.optimized_threshold %>%
filter(., threshold == "0.5, 0.5") %>%
# count(predOutcome, class) %>%
summarize(True_Negative = sum(Count_TN),
True_Positive = sum(Count_TP),
False_Negative = sum(Count_FN),
False_Positive = sum(Count_FP))
test.optimized_threshold %>%
filter(., threshold == "0.5, 0.5") %>%
# count(predOutcome, class) %>%
summarize(True_Negative = sum(Count_TN),
True_Positive = sum(Count_TP),
False_Negative = sum(Count_FN),
False_Positive = sum(Count_FP)) %>%
gather(Variable, Count)
cost_benefit_table_op <-
test.optimized_threshold %>%
filter(., threshold == "0.5, 0.5") %>%
summarize(True_Negative = sum(Count_TN),
True_Positive = sum(Count_TP),
False_Negative = sum(Count_FN),
False_Positive = sum(Count_FP)) %>%
gather(Variable, Count) %>%
mutate(Program_Wide =
case_when(Variable == "True_Negative"  ~ (Count * -14000),
Variable == "True_Positive"  ~ (Count * -14000),
Variable == "False_Negative" ~ (-14000 * Count),
Variable == "False_Positive" ~ (-14000 * Count)),
Program_Targeted =
case_when(Variable == "True_Negative"  ~ (Count * 0),
Variable == "True_Positive"  ~ (Count * -14000),
Variable == "False_Negative" ~ (0 * Count),
Variable == "False_Positive" ~ (-14000 * Count))) %>%
# OverallCost =
#  case_when(Variable == "True_Negative"  ~ (Count * 0),
#            Variable == "True_Positive"  ~ (Count * -42727),
#            Variable == "False_Negative" ~ (-42727 * Count),
#            Variable == "False_Positive" ~ (0 * Count)),
# OverallCost_Wide =
#  case_when(Variable == "True_Negative"  ~ (Count * -14000),
#            Variable == "True_Positive"  ~ ((Count * -14000)*.33 + (Count * (-14000 + -42727)*.67)),
#            Variable == "False_Negative" ~ ((-42727+-14000) * Count),
#            Variable == "False_Positive" ~ (-14000 * Count)),
# OverallCost_Targeted =
#  case_when(Variable == "True_Negative"  ~ (Count * 0),
#            Variable == "True_Positive"  ~ ((Count * -14000)*.33 + (Count * (-14000 + -42727)*.67)),
#            Variable == "False_Negative" ~ (-42727 * Count),
#            Variable == "False_Positive" ~ (-14000 * Count))) %>%
bind_cols(data.frame(Description = c(
"Predicted correctly the defendant would not recidivate, no resources are allocated",
"Predicted correctly that the defendant would recidivate, resources are allocated",
"Predicted incorrectly that the defendant would not recidivate, no resources are allocated",
"Predicted incorrectly that the defendant would recidivate, resources are allocated"))) %>%
bind_rows(summarise_all(., funs(if(is.numeric(.)) sum(.) else "Total")))
kable(cost_benefit_table_op,
digits = 3,
format.args = list(big.mark = ",")) %>%
kable_styling(font_size = 12, full_width = F,
bootstrap_options = c("striped", "hover", "condensed")) %>%
footnote(general_title = "\n",
general = "Table 6.1")
cost_benefit_table_op2 <-
ttest.optimized_threshold %>%
filter(., threshold == "0.5, 0.5") %>%
summarize(True_Negative = sum(Count_TN),
True_Positive = sum(Count_TP),
False_Negative = sum(Count_FN),
False_Positive = sum(Count_FP)) %>%
gather(Variable, Count) %>%
mutate(BaseCost =
case_when(Variable == "True_Negative"  ~ (Count * 0),
Variable == "True_Positive"  ~ (Count * -42727),
Variable == "False_Negative" ~ (-42727 * Count),
Variable == "False_Positive" ~ (0 * Count)),
Cost_WideProgram =
case_when(Variable == "True_Negative"  ~ (Count * -14000),
Variable == "True_Positive"  ~ ((Count * -14000)*.33 + (Count * (-14000 + -42727)*.67)),
Variable == "False_Negative" ~ ((-42727+ -14000) * Count),
Variable == "False_Positive" ~ (-14000 * Count)),
Cost_TargetedProgram =
case_when(Variable == "True_Negative"  ~ (Count * 0),
Variable == "True_Positive"  ~ ((Count * -14000)*.33 + (Count * (-14000 + -42727)*.67)),
Variable == "False_Negative" ~ (-42727 * Count),
Variable == "False_Positive" ~ (-14000 * Count))) %>%
bind_cols(data.frame(Description = c(
"Predicted correctly the ex-offender would not recidivate, no resources are allocated, does not recidivate",
"Predicted correctly that the ex-offender would recidivate, resources are allocated, does recidivate",
"Predicted incorrectly that the ex-offender would not recidivate, no resources are allocated, does recidivate",
"Predicted incorrectly that the ex-offender would recidivate, resources are allocated, does not recidivate"))) %>%
bind_rows(summarise_all(., funs(if(is.numeric(.)) sum(.) else "Total")))
kable(cost_benefit_table_op2,
digits = 3,
format.args = list(big.mark = ",")) %>%
kable_styling(font_size = 12, full_width = F,
bootstrap_options = c("striped", "hover", "condensed")) %>%
footnote(general_title = "\n",
general = "Table 6.1")
cost_benefit_table_op2 <-
test.optimized_threshold %>%
filter(., threshold == "0.5, 0.5") %>%
summarize(True_Negative = sum(Count_TN),
True_Positive = sum(Count_TP),
False_Negative = sum(Count_FN),
False_Positive = sum(Count_FP)) %>%
gather(Variable, Count) %>%
mutate(BaseCost =
case_when(Variable == "True_Negative"  ~ (Count * 0),
Variable == "True_Positive"  ~ (Count * -42727),
Variable == "False_Negative" ~ (-42727 * Count),
Variable == "False_Positive" ~ (0 * Count)),
Cost_WideProgram =
case_when(Variable == "True_Negative"  ~ (Count * -14000),
Variable == "True_Positive"  ~ ((Count * -14000)*.33 + (Count * (-14000 + -42727)*.67)),
Variable == "False_Negative" ~ ((-42727+ -14000) * Count),
Variable == "False_Positive" ~ (-14000 * Count)),
Cost_TargetedProgram =
case_when(Variable == "True_Negative"  ~ (Count * 0),
Variable == "True_Positive"  ~ ((Count * -14000)*.33 + (Count * (-14000 + -42727)*.67)),
Variable == "False_Negative" ~ (-42727 * Count),
Variable == "False_Positive" ~ (-14000 * Count))) %>%
bind_cols(data.frame(Description = c(
"Predicted correctly the ex-offender would not recidivate, no resources are allocated, does not recidivate",
"Predicted correctly that the ex-offender would recidivate, resources are allocated, does recidivate",
"Predicted incorrectly that the ex-offender would not recidivate, no resources are allocated, does recidivate",
"Predicted incorrectly that the ex-offender would recidivate, resources are allocated, does not recidivate"))) %>%
bind_rows(summarise_all(., funs(if(is.numeric(.)) sum(.) else "Total")))
kable(cost_benefit_table_op2,
digits = 3,
format.args = list(big.mark = ",")) %>%
kable_styling(font_size = 12, full_width = F,
bootstrap_options = c("striped", "hover", "condensed")) %>%
footnote(general_title = "\n",
general = "Table 6.1")
###########
# LOAD DATA
############
dat <- read.csv("moves_2018.csv")
setwd("~/")
setwd("~/GitHub/nighttime_personal")
###########
# LOAD DATA
############
dat <- read.csv("moves_2018.csv")
head(dat)
View(dat)
install.packages(c("furrr", "tictoc", "vroom"))
library(tidyverse)
library(lubridate)
library(vroom)
library(sf)
## read it in with vroom to save time
moves <- vroom("data/processed/moves_monthly.csv")
install.packages("sf")
library(sf)
setwd("~/GitHub/musa_practicum_nighttime/demo")
moves <- vroom("moves_monthly.csv")
phila <- read_sf("phila.geojson")
phila <- read("phila.geojson")
phila <- read_sf("phila.geojson")
phila <- st_read("phila.geojson")
library(sf)
## read it in with vroom to save time
moves <- vroom("moves_monthly.csv")
remove.packages("sf")
install.packages("sf")
library(sf)
