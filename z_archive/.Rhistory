get_acs(geography = "block group",
# variables = c("B01003_001E",
#               "B02001_002E",
#               "B01002_001E",
#               "B19013_001E",
#               "B25064_001E",
#               "B03002_012E",
#               "B02001_003E"),
year=2018,
state=c(42),
county=c(101, 017, 045, 091), #add all counties around philadelphia delaware, mont, buck
geometry=T,
output = "wide") %>%
st_transform('ESRI:102728')%>%
rename(TotalPop = B01003_001E,
White = B02001_002E,
MedAge = B01002_001E,
MedHHInc = B19013_001E,
MedRent = B25064_001E,
Hisp = B03002_012E,
Black = 	B02001_003E,
GEOID10 = GEOID) %>%
dplyr::select(-ends_with("M")) %>%
mutate(pctWhite = ((White / TotalPop)*100),
pctBlack = ((Black / TotalPop)*100),
pctHisp = ((Hisp / TotalPop)*100),
tract_area_mi = as.numeric(st_area(geometry)*0.000000035870),
popdens_mi = TotalPop / tract_area_mi
# Context_Race = ifelse(pctWhite > .5, "Majority White", "Majority Non-White"),
# Context_Income = ifelse(MedHHInc > 46116, "High Income", "Low Income"),
# Context_Age = ifelse(MedAge > 34.5, "High Median Age", "Low Median Age"),
# Context_Rent = ifelse(MedRent > 1032, "High Median Rent", "Low Median Rent")
) %>%
st_as_sf()
ggplot() + geom_sf(data = pa_nj_blockgroups)
ggplot() + geom_sf(data = pa_nj_blockgroups) + geom_sf(data = phl_boundary, color = "red")
ggplot() + geom_sf(data = pa_nj_blockgroups) + geom_sf(data = phl_boundary, color = "red", fill = "transparent")
ggplot() + geom_sf(data = pa_nj_blockgroups) + geom_sf(data = phl_boundary, color = "red", fill = "transparent", lwd = 2)
dat_pred_agg_sub <- dat_pred_agg[dat_pred_agg$corridor!="Market East" & dat_pred_agg$corridor!="Castor and Benner",]
set.seed(414)
inTrain.sub <- createDataPartition(y=dat_pred_agg_sub$Night_visits_sqmi_log, p = .60, list = FALSE)
phl.training.sub <- dat_pred_agg_sub[inTrain.sub,]
phl.test.sub <- dat_pred_agg_sub[-inTrain.sub,]
#Multivariate regression
reg1.sub <-
lm(Night_visits_sqmi_log ~ ., #change lm to ranger, predictions are a little different
data = st_drop_geometry(phl.training.sub) %>%
select(Night_visits_sqmi_log,
phl_building_size_log,
# phl_UPenn,
phl_Temple,
# phl_CityHall,
# phl_rest_sqft_log,
# phl_bar_sqft_log,
phl_vacrate_log,
# phl_CenterCity,
# sg_distance_home_log,
sg_dwell,
count_bars_a_log,
count_rest_a_log,
count_arts_a_log,
count_grocery_a_log,
# count_childcare_a_log,
# count_religious_a_log,
# count_bars_a,
# count_rest_a,
# count_arts_a,
# count_college_a,
# count_sports_a,
# count_museums_a,
# count_amuse_a_log,
# count_hotels_a,
nn_transit_log,
# nn_parking_log,
nn_parks_log,
# count_late_tag,
# count_barpub_tag,
corr_type,
count_late_log,
# count_barpub_log,
demo_pctWhite,
# demo_pctBlack,
# demo_pctHisp_log,
# demo_medAge,
# demo_popdens,
# demo_popdens_log,
demo_medrent,
demo_MHI)
)
summary(reg1.sub)
#Error Table
phl.test.sub <-
phl.test.sub %>%
st_drop_geometry() %>%
mutate(Regression = "Subset Regression",
Visits.Predict = exp(predict(reg1.sub, phl.test.sub)),
Visits.Error = Visits.Predict - Night_visits_sqmi,
Visits.AbsError = abs(Visits.Predict - Night_visits_sqmi),
Visits.APE = (abs(Visits.Predict - Night_visits_sqmi)) / Visits.Predict)
rbind(phl.test, phl.test.sub) %>%
group_by(Regression) %>%
dplyr::summarize(MAE = mean(Visits.AbsError, na.rm = T),
MAPE = mean(Visits.AbsError, na.rm = T) / mean(Night_visits_sqmi, na.rm = T)) %>%
kable(caption = "MAE and MAPE for Test Set Data") %>% kable_styling()
#Error Scatterplot
reg1.sub_predict <- exp(predict(reg1.sub, newdata = phl.test.sub))
rmse.train <- caret::MAE(exp(predict(reg1.sub)), phl.training.sub$Night_visits_sqmi)
rmse.test <- caret::MAE(reg1.sub_predict, phl.test.sub$Night_visits_sqmi)
preds.train.sub <- data.frame(pred   = exp(predict(reg1.sub)),
actual = phl.training.sub$Night_visits_sqmi,
source = "training data")
preds.test.sub  <- data.frame(pred   = reg1.sub_predict,
actual = phl.test.sub$Night_visits_sqmi,
source = "testing data")
preds.sub <- rbind(preds.train.sub, preds.test.sub)
ggplot(preds.sub, aes(x = pred, y = actual, color = source)) +
geom_point() +
geom_smooth(method = "lm", color = "green") +
geom_abline(color = "orange") +
theme_bw() +
coord_equal() +
facet_wrap(~source, ncol = 2) +
labs(title = "Comparing predictions to actual values",
x = "Predicted Value",
y = "Actual Value",
subtitle = "Figure X.X") +
theme(
legend.position = "none"
)
preds.corr.train.sub <- data.frame(corridor = phl.training.sub$corridor,
dat_range_start = phl.training.sub$date_range_start,
pred   = exp(predict(reg1.sub)),
actual = phl.training.sub$Night_visits_sqmi,
source = "training data")
preds.corr.test.sub  <- data.frame(corridor = phl.test.sub$corridor,
dat_range_start = phl.test.sub$date_range_start,
pred   = reg1.sub_predict,
actual = phl.test.sub$Night_visits_sqmi,
source = "testing data")
ggplot(preds.sub, aes(x = pred, y = actual, color = source)) +
geom_point() +
geom_smooth(method = "lm", color = "green") +
geom_abline(color = "orange") +
theme_bw() +
coord_equal() +
facet_wrap(~source, ncol = 2) +
labs(title = "Comparing predictions to actual values",
x = "Predicted Value",
y = "Actual Value",
subtitle = "Figure X.X") +
theme(
legend.position = "none"
)
summary(reg1)
#Multivariate regression
reg1 <-
lm(Night_visits_sqmi_log ~ ., #change lm to ranger, predictions are a little different
data = st_drop_geometry(phl.training) %>%
select(Night_visits_sqmi,
phl_building_size_log,
# phl_UPenn,
phl_Temple,
# phl_CityHall,
# phl_rest_sqft_log,
# phl_bar_sqft_log,
phl_vacrate_log,
# phl_CenterCity,
# sg_distance_home_log,
sg_dwell,
count_bars_a_log,
count_rest_a_log,
count_arts_a_log,
count_grocery_a_log,
# count_childcare_a_log,
# count_religious_a_log,
# count_bars_a,
# count_rest_a,
# count_arts_a,
# count_college_a,
# count_sports_a,
# count_museums_a,
# count_amuse_a_log,
# count_hotels_a,
nn_transit_log,
# nn_parking_log,
nn_parks_log,
# count_late_tag,
# count_barpub_tag,
corr_type,
count_late_log,
# count_barpub_log,
demo_pctWhite,
# demo_pctBlack,
# demo_pctHisp_log,
# demo_medAge,
# demo_popdens,
# demo_popdens_log,
demo_medrent,
demo_MHI)
)
#Multivariate regression
reg1 <-
lm(Night_visits_sqmi ~ ., #change lm to ranger, predictions are a little different
data = st_drop_geometry(phl.training) %>%
select(Night_visits_sqmi,
phl_building_size_log,
# phl_UPenn,
phl_Temple,
# phl_CityHall,
# phl_rest_sqft_log,
# phl_bar_sqft_log,
phl_vacrate_log,
# phl_CenterCity,
# sg_distance_home_log,
sg_dwell,
count_bars_a_log,
count_rest_a_log,
count_arts_a_log,
count_grocery_a_log,
# count_childcare_a_log,
# count_religious_a_log,
# count_bars_a,
# count_rest_a,
# count_arts_a,
# count_college_a,
# count_sports_a,
# count_museums_a,
# count_amuse_a_log,
# count_hotels_a,
nn_transit_log,
# nn_parking_log,
nn_parks_log,
# count_late_tag,
# count_barpub_tag,
corr_type,
count_late_log,
# count_barpub_log,
demo_pctWhite,
# demo_pctBlack,
# demo_pctHisp_log,
# demo_medAge,
# demo_popdens,
# demo_popdens_log,
demo_medrent,
demo_MHI)
)
summary(reg1)
phl.test <-
phl.test %>%
st_drop_geometry() %>%
mutate(Regression = "Baseline Regression",
Visits.Predict = predict(reg1, phl.test),
Visits.Error = Visits.Predict - Night_visits_sqmi,
Visits.AbsError = abs(Visits.Predict - Night_visits_sqmi),
Visits.APE = (abs(Visits.Predict - Night_visits_sqmi)) / Visits.Predict)
#Setting up test and training datasets
set.seed(414)
inTrain <- createDataPartition(y=dat_pred_agg$Night_visits_sqmi_log, p = .60, list = FALSE)
phl.training <- dat_pred_agg[inTrain,]
phl.test <- dat_pred_agg[-inTrain,]
#Multivariate regression
reg1 <-
lm(Night_visits_sqmi ~ ., #change lm to ranger, predictions are a little different
data = st_drop_geometry(phl.training) %>%
select(Night_visits_sqmi,
phl_building_size_log,
# phl_UPenn,
phl_Temple,
# phl_CityHall,
# phl_rest_sqft_log,
# phl_bar_sqft_log,
phl_vacrate_log,
# phl_CenterCity,
# sg_distance_home_log,
sg_dwell,
count_bars_a_log,
count_rest_a_log,
count_arts_a_log,
count_grocery_a_log,
# count_childcare_a_log,
# count_religious_a_log,
# count_bars_a,
# count_rest_a,
# count_arts_a,
# count_college_a,
# count_sports_a,
# count_museums_a,
# count_amuse_a_log,
# count_hotels_a,
nn_transit_log,
# nn_parking_log,
nn_parks_log,
# count_late_tag,
# count_barpub_tag,
corr_type,
count_late_log,
# count_barpub_log,
demo_pctWhite,
# demo_pctBlack,
# demo_pctHisp_log,
# demo_medAge,
# demo_popdens,
# demo_popdens_log,
demo_medrent,
demo_MHI)
)
summary(reg1)
phl.test <-
phl.test %>%
st_drop_geometry() %>%
mutate(Regression = "Baseline Regression",
Visits.Predict = predict(reg1, phl.test),
Visits.Error = Visits.Predict - Night_visits_sqmi,
Visits.AbsError = abs(Visits.Predict - Night_visits_sqmi),
Visits.APE = (abs(Visits.Predict - Night_visits_sqmi)) / Visits.Predict)
ErrorTable <-
phl.test %>%
dplyr::summarize(Regression = "Baseline Regression",
MAE = mean(Visits.AbsError, na.rm = T),
MAPE = mean(Visits.AbsError, na.rm = T) / mean(Night_visits_sqmi, na.rm = T))
ErrorTable %>%
group_by(Regression) %>%
arrange(desc(MAE)) %>%
kable(caption = "MAE and MAPE for Test Set Data") %>% kable_styling()
reg1_predict <- predict(reg1, newdata = phl.test)
# View(test)
# length(exp(predict(reg1)))
# length(phl.training$Night_visits_sqmi)
#
# summary(phl.training)
rmse.train <- caret::MAE(predict(reg1), phl.training$Night_visits_sqmi)
rmse.test <- caret::MAE(reg1_predict, phl.test$Night_visits_sqmi)
preds.train <- data.frame(pred   = predict(reg1),
actual = phl.training$Night_visits_sqmi,
source = "training data")
preds.test  <- data.frame(pred   = reg1_predict,
actual = phl.test$Night_visits_sqmi,
source = "testing data")
preds <- rbind(preds.train, preds.test)
ggplot(preds, aes(x = pred, y = actual, color = source)) +
geom_point() +
geom_smooth(method = "lm", color = "green") +
geom_abline(color = "orange") +
theme_bw() +
coord_equal() +
facet_wrap(~source, ncol = 2) +
labs(title = "Comparing predictions to actual values",
x = "Predicted Value",
y = "Actual Value",
subtitle = "Figure X.X") +
theme(
legend.position = "none"
)
library(ranger)
set.seed(414)
inTrain <- createDataPartition(y=dat_pred_agg$Night_visits_sqmi_log, p = .60, list = FALSE)
phl.training <- dat_pred_agg[inTrain,]
phl.test <- dat_pred_agg[-inTrain,]
#Multivariate regression
rf1 <-
ranger(Night_visits_sqmi_log ~ ., #change lm to ranger, predictions are a little different
data = st_drop_geometry(phl.training) %>%
select(Night_visits_sqmi_log,
phl_building_size_log,
# phl_UPenn,
phl_Temple,
# phl_CityHall,
# phl_rest_sqft_log,
# phl_bar_sqft_log,
phl_vacrate_log,
# phl_CenterCity,
# sg_distance_home_log,
sg_dwell,
count_bars_a_log,
count_rest_a_log,
count_arts_a_log,
count_grocery_a_log,
# count_childcare_a_log,
# count_religious_a_log,
# count_bars_a,
# count_rest_a,
# count_arts_a,
# count_college_a,
# count_sports_a,
# count_museums_a,
# count_amuse_a_log,
# count_hotels_a,
nn_transit_log,
# nn_parking_log,
nn_parks_log,
# count_late_tag,
# count_barpub_tag,
corr_type,
count_late_log,
# count_barpub_log,
demo_pctWhite,
# demo_pctBlack,
# demo_pctHisp_log,
# demo_medAge,
# demo_popdens,
# demo_popdens_log,
demo_medrent,
demo_MHI)
)
summary(rf1)
rf1$predictions
#Error Table
# phl.test.rf <-
#   phl.test %>%
#   st_drop_geometry() %>%
#   mutate(Regression = "RF Regression",
#          Visits.Predict = exp(predict(rf1, phl.test)),
#          Visits.Error = Visits.Predict - Night_visits_sqmi,
#          Visits.AbsError = abs(Visits.Predict - Night_visits_sqmi),
#          Visits.APE = (abs(Visits.Predict - Night_visits_sqmi)) / Visits.Predict)
summary(rf1)
rf
rf1
predict(rf1)
xx <- predict(rf1, data = phl.test)
phl.test
xx <- predict(rf1, data = st_drop_geometry(phl.test))
xx
xx$predictions
exp(xx$predictions)
test_pred <- cbind(phl.test, exp(xx$predictions))
head(test_pred)
glimpse(test_pred)
test_pred <- data.frame(phl.test, pred = exp(xx$predictions))
glimpse(test_pred)
plot(test_pred$Night_visits_sqmi, pred)
plot(test_pred$Night_visits_sqmi, test_pred$pred)
ggplot(test_pred, aes(x = pred, y = Night_visits_sqmi)) +
geom_point() +
geom_smooth(method = "lm", color = "green") +
geom_abline(color = "orange") +
theme_bw() +
coord_equal() +
labs(title = "Comparing predictions to actual values",
x = "Predicted Value",
y = "Actual Value",
subtitle = "Figure X.X") +
theme(
legend.position = "none"
)
#Load packages
library(tidycensus)
#Demographic data
pa_blockgroups <-
get_acs(geography = "block group",
variables = c("B01003_001E", #select variables
"B02001_002E",
"B01002_001E",
"B19013_001E",
"B25064_001E",
"B03002_012E",
"B02001_003E"),
year=2018, #select year
state=42, #PA FIPs code
county=c(101, 017, 045, 091), #FIPS code for Philly, Bucks, Montgomery, Delaware
geometry=T,
output = "wide") %>%
st_transform('ESRI:102728') %>% #PA projection
rename(TotalPop = B01003_001E,
White = B02001_002E,
MedAge = B01002_001E,
MedHHInc = B19013_001E,
MedRent = B25064_001E,
Hisp = B03002_012E,
Black = 	B02001_003E,
GEOID10 = GEOID) %>% #Clean up column names
dplyr::select(-ends_with("M")) %>%
mutate(pctWhite = ((White / TotalPop)*100),
pctBlack = ((Black / TotalPop)*100),
pctHisp = ((Hisp / TotalPop)*100),
tract_area_mi = as.numeric(st_area(geometry)*0.000000035870),
popdens_mi = TotalPop / tract_area_mi) %>% #Generate new columns
st_as_sf()
#Load packages
library(tidyverse)
library(tidycensus)
#Demographic data
pa_blockgroups <-
get_acs(geography = "block group",
variables = c("B01003_001E", #select variables
"B02001_002E",
"B01002_001E",
"B19013_001E",
"B25064_001E",
"B03002_012E",
"B02001_003E"),
year=2018, #select year
state=42, #PA FIPs code
county=c(101, 017, 045, 091), #FIPS code for Philly, Bucks, Montgomery, Delaware
geometry=T,
output = "wide") %>%
st_transform('ESRI:102728') %>% #PA projection
rename(TotalPop = B01003_001E,
White = B02001_002E,
MedAge = B01002_001E,
MedHHInc = B19013_001E,
MedRent = B25064_001E,
Hisp = B03002_012E,
Black = 	B02001_003E,
GEOID10 = GEOID) %>% #Clean up column names
dplyr::select(-ends_with("M")) %>%
mutate(pctWhite = ((White / TotalPop)*100),
pctBlack = ((Black / TotalPop)*100),
pctHisp = ((Hisp / TotalPop)*100),
tract_area_mi = as.numeric(st_area(geometry)*0.000000035870),
popdens_mi = TotalPop / tract_area_mi) %>% #Generate new columns
st_as_sf()
